From 716b8a7d704bc8cf188b94acf414ec16289d3584 Mon Sep 17 00:00:00 2001
From: amruthkarnam <amruthkarnam@gmail.com>
Date: Tue, 19 Nov 2019 12:06:50 +0530
Subject: [PATCH 2/3] week12

---
 Makefile |  7 ++++---
 big.c    | 53 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 fs.c     | 41 +++++++++++++++++++++++++++++++++++++++++
 fs.h     | 14 ++++++++++----
 param.h  |  2 +-
 5 files changed, 109 insertions(+), 8 deletions(-)
 create mode 100644 big.c

diff --git a/Makefile b/Makefile
index 09d790c..2cf15f8 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_big\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,9 +218,9 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
-QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
+QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA) -snapshot
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
@@ -250,7 +251,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c big.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/big.c b/big.c
new file mode 100644
index 0000000..d732546
--- /dev/null
+++ b/big.c
@@ -0,0 +1,53 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int
+main()
+{
+  char buf[512];
+  int fd, i, sectors;
+
+  fd = open("big.file", O_CREATE | O_WRONLY);
+  if(fd < 0){
+    printf(2, "big: cannot open big.file for writing\n");
+    exit();
+  }
+
+  sectors = 0;
+  while(1){
+    *(int*)buf = sectors;
+    int cc = write(fd, buf, sizeof(buf));
+    if(cc <= 0)
+      break;
+    sectors++;
+	if (sectors % 100 == 0)
+		printf(2, ".");
+  }
+
+  printf(1, "\nwrote %d sectors\n", sectors);
+
+  close(fd);
+  fd = open("big.file", O_RDONLY);
+  if(fd < 0){
+    printf(2, "big: cannot re-open big.file for reading\n");
+    exit();
+  }
+  for(i = 0; i < sectors; i++){
+    int cc = read(fd, buf, sizeof(buf));
+    if(cc <= 0){
+      printf(2, "big: read error at sector %d\n", i);
+      exit();
+    }
+    if(*(int*)buf != i){
+      printf(2, "big: read the wrong data (%d) for sector %d\n",
+             *(int*)buf, i);
+      exit();
+    }
+  }
+
+  printf(1, "done; ok\n"); 
+
+  exit();
+}
\ No newline at end of file
diff --git a/fs.c b/fs.c
index f77275f..b7ad823 100644
--- a/fs.c
+++ b/fs.c
@@ -21,6 +21,8 @@
 #include "buf.h"
 #include "file.h"
 
+
+
 #define min(a, b) ((a) < (b) ? (a) : (b))
 static void itrunc(struct inode*);
 // there should be one superblock per disk device, but we run with
@@ -373,8 +375,10 @@ static uint
 bmap(struct inode *ip, uint bn)
 {
   uint addr, *a;
+  short entry, offset;
   struct buf *bp;
 
+  // direct
   if(bn < NDIRECT){
     if((addr = ip->addrs[bn]) == 0)
       ip->addrs[bn] = addr = balloc(ip->dev);
@@ -382,6 +386,7 @@ bmap(struct inode *ip, uint bn)
   }
   bn -= NDIRECT;
 
+  // single indirect
   if(bn < NINDIRECT){
     // Load indirect block, allocating if necessary.
     if((addr = ip->addrs[NDIRECT]) == 0)
@@ -395,6 +400,42 @@ bmap(struct inode *ip, uint bn)
     brelse(bp);
     return addr;
   }
+  bn -= NINDIRECT;
+
+  // double indirect
+  if(bn < NDOUBLE_INDIRECT){
+    // Load double indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT + 1]) == 0)
+      ip->addrs[NDIRECT + 1] = addr = balloc(ip->dev);
+    
+    // get the double indirect table, first level
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    
+    // calculate the entry number and the index
+    entry = bn / NDINDIRECT_PER_ENTRY;
+    offset = bn % NDINDIRECT_PER_ENTRY;
+    
+    // load level B table, allocating if necessary
+    if((addr = a[entry]) == 0){
+      a[entry] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+
+    // get the double indirect table, second level
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+
+    // if the offset doesnt exist, assign a block to this entry
+    if((addr = a[offset]) == 0){
+      a[offset] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+
+    brelse(bp);
+    return addr;
+  }
 
   panic("bmap: out of range");
 }
diff --git a/fs.h b/fs.h
index 3214f1d..fb4477d 100644
--- a/fs.h
+++ b/fs.h
@@ -21,10 +21,16 @@ struct superblock {
   uint bmapstart;    // Block number of first free map block
 };
 
-#define NDIRECT 12
+#define NDIRECT 11
 #define NINDIRECT (BSIZE / sizeof(uint))
-#define MAXFILE (NDIRECT + NINDIRECT)
-
+// #define MAXFILE (NDIRECT + NINDIRECT)
+#define NDINDIRECT_ENTRY (128)
+#define NDINDIRECT_PER_ENTRY (128)
+// double indirect inode number 128 * 128
+#define NDOUBLE_INDIRECT (NDINDIRECT_ENTRY * NDINDIRECT_PER_ENTRY)
+
+// max file inode
+#define MAXFILE (NDIRECT + NINDIRECT + NDOUBLE_INDIRECT)
 // On-disk inode structure
 struct dinode {
   short type;           // File type
@@ -32,7 +38,7 @@ struct dinode {
   short minor;          // Minor device number (T_DEV only)
   short nlink;          // Number of links to inode in file system
   uint size;            // Size of file (bytes)
-  uint addrs[NDIRECT+1];   // Data block addresses
+  uint addrs[NDIRECT+2];   // Data block addresses
 };
 
 // Inodes per block.
diff --git a/param.h b/param.h
index a7e90ef..95d281f 100644
--- a/param.h
+++ b/param.h
@@ -10,5 +10,5 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
+#define FSSIZE       200000  // size of file system in blocks
 
-- 
2.7.4

